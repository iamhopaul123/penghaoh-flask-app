# Buildspec run in the build stage of your pipeline.
version: 0.2
phases:
  install:
    runtime-versions:
      docker: 18
      ruby: 2.6
    commands:
      - echo "cd into $CODEBUILD_SRC_DIR"
      - cd $CODEBUILD_SRC_DIR
      # Download the ecs-cli-v2 linux binary.
      - wget https://penghaoh-archer.s3-us-west-2.amazonaws.com/ecs-preview-amd64
      - mv ./ecs-preview-amd64 ./ecs-preview
      - chmod +x ./ecs-preview
  build:
    commands:
      - echo "Run your tests"
      # - make test
  post_build:
    commands:
      - ls -l
      - export COLOR="false"
      # Find all the local applications in the workspace.
      - apps=$(./ecs-preview app ls --local --json | jq '.applications[].name' | sed 's/"//g')
      # Find all the environments.
      - envs=$(./ecs-preview env ls --json | jq '.environments[].name' | sed 's/"//g')
      # Generate the cloudformation templates.
      # The tag is the build ID but we replaced the colon ':' with a dash '-'.
      - tag=$(sed 's/:/-/g' <<<"$CODEBUILD_BUILD_ID")
      - >
        for env in $envs; do
          for app in $apps; do
          ./ecs-preview app package -n $app -e $env --output-dir './infrastructure' --tag $tag;
          done;
        done;
      - ls -lah ./infrastructure
      # If addons exists, upload addons templates to each S3 bucket and write template URL to template config files.
      - |
        ADDONSFILE=./infrastructure/$app.addons.stack.yml
        if [ -f "$ADDONSFILE" ]; then
          echo "Copying addons stack templates to S3"
          for app in $apps; do
            timestamp=$(date +%s)
            for row in $(echo '[{"BucketName":"stackset-my-project-infr-pipelinebuiltartifactbuc-k0jp3eeye7b8","Region":"us-west-2","Environments":"prod,test"}]' | jq -r '.[] | @base64'); do
              _jq() {
                echo ${row} | base64 --decode | jq -r ${1}
              }
              bucketName=$(_jq '.BucketName')
              region=$(_jq '.Region')
              envsTemp=$(_jq '.Environments')
              IFS=',' read -ra environments <<< "$envsTemp"
              
              aws s3 cp "$ADDONSFILE" "s3://$bucketName/manual/$timestamp/$app.addons.stack.yml";

              for envName in "${environments[@]}"; do
                tmp=$(mktemp)
                jq --arg a "https://$bucketName.s3-$region.amazonaws.com/manual/$timestamp/$app.addons.stack.yml" '.Parameters.AddonsTemplateURL = $a' ./infrastructure/$app-$envName.params.json > "$tmp" && mv "$tmp" ./infrastructure/$app-$envName.params.json
              done;
            done;
          done;
        fi
      # Build images
      # - For each manifest file:
      #   - Read the path to the Dockerfile by translating the YAML file into JSON
      #   - Run docker build.
      #   - For each environment:
      #     - Retrieve the ECR repository.
      #     - Login and push the image.
      - >
        for app in $apps; do
          for docker_dir in $(cat $CODEBUILD_SRC_DIR/ecs-project/$app/manifest.yml | ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))' | jq '.image.build' | sed 's/"//g'); do
          cd $CODEBUILD_SRC_DIR/$docker_dir;
          docker build -t $app:$tag .;
          image_id=$(docker images -q $app:$tag);
            for env in $envs; do
            repo=$(cat $CODEBUILD_SRC_DIR/infrastructure/$app-$env.params.json | jq '.Parameters.ContainerImage' | sed 's/"//g');
            region=$(echo $repo | cut -d'.' -f4);
            $(aws ecr get-login --no-include-email --region $region);
            docker tag $image_id $repo;
            docker push $repo;
            done;
          done;
        done;
artifacts:
  files:
    - "infrastructure/*"